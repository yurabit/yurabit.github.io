<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 王源豫个人博客</title>
    <link>/post/</link>
    <description>Recent content in Posts on 王源豫个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 May 2020 11:45:36 +0800</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go语言的单元测试</title>
      <link>/post/go_test/</link>
      <pubDate>Sat, 30 May 2020 11:45:36 +0800</pubDate>
      
      <guid>/post/go_test/</guid>
      <description>Go语言单元测试的基本规则介绍 Go语言的单元测试较容易实现，Go语言为我们提供了单元测试的框架，主要有下面的几个规定
//规则1 </description>
    </item>
    
    <item>
      <title>Go的数组、切片与映射</title>
      <link>/post/goarray/</link>
      <pubDate>Sat, 16 May 2020 21:58:23 +0800</pubDate>
      
      <guid>/post/goarray/</guid>
      <description>数组  数组的声明方式  //1.声明一个有5个元素的默认数组 var array [5]int //2.声明一个已经初始化好的数组 array := [5]int{2, 4, 5, 1, 3} //3.可以用...来作为前面的数组个数的占位符 array := [...]int{2, 4, 1, 5, 6, 7} //4.声明一个数组，并对其其中几个元素进行初始化 array := [5]int{1: 2, 3: 5} //5.声明一个指针数组，数组中的元素全部为指针 array := [5]*int{0: new(int), 2: new(int)} 同类型和同长度的数组间可以通过“=”来直接复制   若不同长度或者数据类型进行复制则会编译错误
 声明一个二维数组  //1.普通声明不赋值 var array [5][5]int //上面几种类似 数组的参数传递为值传递  切片 切片的结构为：
 数组指针 切片长度 容量   声明切片的方法  //1. 创建一个字符串切片长度和容量都是5 slice := make([]string, 5) //2. 创建一个整型切片，长度为3，容量为5 slice := make([]int, 3, 5) //注： 若切片的容量小于长度会编译错误  //3.</description>
    </item>
    
    <item>
      <title>约瑟夫环问题、以及数学解法</title>
      <link>/post/leetcodejoseph/</link>
      <pubDate>Mon, 30 Mar 2020 22:42:51 +0800</pubDate>
      
      <guid>/post/leetcodejoseph/</guid>
      <description>题目描述 解题思路  关键思路：留作补充
  暴力解  public class Solution { public int lastRemaining(int n, int m) { if(n &amp;lt; 1 || m &amp;lt; 1) { return -1; } Node head = new Node(0); Node current = head; for(int i = 1; i &amp;lt; n; i++) { Node temp = new Node(i); temp.prev = current; current.next = temp; current = current.next; } current.next = head; head.prev = current; current = current.</description>
    </item>
    
    <item>
      <title>面向对象与面向过程的理解</title>
      <link>/post/oopvspop/</link>
      <pubDate>Fri, 27 Mar 2020 10:38:05 +0800</pubDate>
      
      <guid>/post/oopvspop/</guid>
      <description>首先我们来看一下定义：
面向对象，Object Oriented，是一种编程术语。面向对象是当今软件开发的主流方法之一，他是把数据以及对数据的操作放在一起，作为一个相互依存的整体，就是我们所说的对象。对同类对象抽象出他们的共性，就是类，类中的大多数数据，只能被本类的方法进行处理。类通过一个简单的外部接口和外界发生关系，对象与对象之间通过消息进行通信。程序流程由用户在使用中决定。
面向过程， Procedure Oriented，是一种以事件为中心的开发方法，就是自顶向下顺序执行，逐步求精，其程序结构是按照功能划分为若干个基本模块，这些模块内部一般都是由顺序，选择和循环 3种基本结构组成，其模块化实现的具体方法是使用子程序，而程序流程在写程序的时候就已经决定了。
总结一下面向对象和面向过程的区别：
  出发点不同。面向对象方法是符合常规思维的方式来处理客观世界的问题，强调把问题域的要领直接映射到对象及对象之间的接口上。而面向过程方法强调的是过程的抽象化与模块化，它是以过程为中心构造或者处理客观世界问题的。
  层次逻辑关系不同。面向对象方法是用计算机逻辑来模拟客观世界中的物理存在，以对象的集合-类-作为处理问题的基本单位，尽可能地使计算机世界向客观世界靠拢，以使问题的处理更清晰直接，面向对象方法是用类的层次结构来体现类之间的继承和发展。而面向过程方法处理问题的基本单位是能清晰准确地表达过程的模块，用模块的层次结构概括模块或模块间的关系与功能，把客观世界的问题抽象成计算机可以处理的过程。
  数据处理方式与控制程序的方式不同。面向对象方法将数据与对应的代码封装成一个整体，原则上其他对象不能直接修改其数据，即对象的修改只能由自身的成员函数完成，控制程序方式上是通过“事件驱动”来激活和运行程序。而面向过程的方法是直接通过程序来处理数据，处理完毕后即可显示处理结果，在控制程序方式上按照设计调用或返回程序，不能自由导航，各模块之间存在控制与被控制、调用与被调用的关系。
  分析设计与编码转换方式不同。面向对象方法贯穿于软件生命周期的分析、设计以及编码中，是一种平滑过程，从分析到设计再到编码是采用一致性的模型表示，即实现的是一种无缝连接。而面向过程方法强调分析、设计以及编码之间按照规则进行转换，贯穿于软件生命周期的分析、设计以及编码中，实现的是一种有缝的连接。
  面向对象的三大特征   封装
封装是指将客观事物抽象成类，每个类对自身的数据和方法实行保护。类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。
  继承
继承是一种连接类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以由现有的类中派生，这个过程称之为继承。新类继承了原始类或者接口的特性，新类称为原始类的派生类（子类或接口的实现），而原始类称为新类的 基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且派生类可以修改或新增新的方法使之更适合特殊的需要。
 当创建一个子类的对象时，该对象包含了一个基类的子对象。这个子对象与用基类直接创建的对象是一样的。二者的区别在于后者来自于外部，而基类的子对象被包装在子类对象的内部。下面的代码证实了这一点：  class Art { Art() { System.out.println(&amp;#34;我是爷爷类&amp;#34;); } } class Drawing extends Art{ Drawing() { System.out.println(&amp;#34;我是爸爸类&amp;#34;); } } public class Cartoon extends Drawing{ Cartoon() { System.out.println(&amp;#34;我是孙子类&amp;#34;); } public static void main(String[] args) { Cartoon cartoon = new Cartoon(); } } //输出结果 我是爷爷类 //这里调用了爷爷类的构造方法 我是爸爸类 //这里调用了父亲类的构造方法 我是孙子类 //这里调用了子类的构造方法  类的加载  在java中，所谓类的加载是指将类的相关信息加载到内存。在java中，类的加载是动态加载的，当第一次使用这个类的时候才会加载，加载一个类时，会先去判定这个类的父类是否已经加载，如果没有加载，则会先加载其父类。</description>
    </item>
    
    <item>
      <title>暑期实习腾讯微信事业群面试</title>
      <link>/post/tecentinterview/</link>
      <pubDate>Thu, 26 Mar 2020 20:58:35 +0800</pubDate>
      
      <guid>/post/tecentinterview/</guid>
      <description>2020年3月26日，我终于迎来了人生中第一次面试，上来就是鹅厂的微信事业群大佬，怀着紧张的心情，翘了正在做的实验，来到了宿舍，调试好电脑，早早的坐在这边等着面试了。让我们一起开始吧……
刚上来便是一道coding
什么？这么简单的题也想难倒我，我可是刚看了topK问题的，这不就是topK问题的变形吗，看我一通操作，各种优先队列、栈链表全用起来了，好吧，大家看到这里应该已经发现作者的脑子不太好、这个题明明就是个简单的排序啊…不说了，我先去哭一会，折腾了半天，得意洋洋的点了提交，结果突然报错，请用Main类命名、并定义好main方法，记得要循环输入哦！重点来了！考研时候还记得的循环输入，我竟然不知道java里该如何操作！
javaOJ中各种变量的输入
 只有一组数据  Scanner s = new Scanner(System.in); int a = s.nextInt(); int b = s.nextInt(); 输入多组数据，不告知组数，也没有截止符  Scanneer s = new Scanner(System.in); while(s.hasNext) {//判断数据是否结束  int a = s.nextInt(); int b = s.nextInt(); } 输入多组数据，第一行是整数N，表示有N组数据，之后每行表示一组数据  int a; int b; int n; Scanner s = new Scanner(System.in); n = s.nextInt(); for(int. i = 0; i &amp;lt; n; i++) { a = s.nextInt(); b = s.nextInt(); } 下面贴上我后面自己重新写的代码吧（以后一定多多手敲代码，少用IDE）</description>
    </item>
    
    <item>
      <title>JVM概述（一）</title>
      <link>/post/first/</link>
      <pubDate>Sun, 22 Mar 2020 02:00:06 +0800</pubDate>
      
      <guid>/post/first/</guid>
      <description>JVM JVM(Java Virtual Machine)Java虚拟机是Java实现“一次编写、到处运行”的基本平台。他的总体结构是按照下图所示。
一个java的程序执行大体流程
 通过编译java源文件成字节码文件、或者动态生成的Java字节码文件 将字节码文件（.class文件）通过类加载-&amp;gt;验证-&amp;gt;准备-&amp;gt;解析-&amp;gt;初始化等过程将类以及变量或者方法信息加入到JVM内存中。 运行时数据区分为了5个部分分别存放不同类型的数据 执行引擎通过给定的指令以及分配的处理机按照一定顺序执行程序 将类卸载、程序结束。  </description>
    </item>
    
  </channel>
</rss>